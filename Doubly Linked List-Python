class Node:
    def __init__(self,data):
        self.data=data
        self.nlink=None
        self.plink=None
        
class Double_Ll:
    def __init__(self):
        self.head=None
    
    def Forward_traversal(self):
        if self.head is None:
            print("Linked List is empty!")
        else:
            n = self.head
            while n is not None:
                print(n.data,"---->",end=" ")
                n = n.nlink
                
    def backward_traversal(self):
        print()
        if self.head is None:
            print("Linked List is empty!")
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            while n is not None:
                print(n.data,"---->",end=" ")
                n = n.plink
    
    def insert_empty(self,data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print("Linked List is not empty!")

    def add_first(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.nref = self.head
            self.head.pref = new_node
            self.head = new_node

    def add_last(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            n.nlink = new_node
            new_node.plink = n
            
    def add_after(self,data,x):
        if self.head is None:
            print("LL is empty!")
        else:
            n =self.head
            while n is not None:
                if x==n.data:
                    break
                n = n.nlink
            if n is None:
                print("Given Node is not present in DLL")
            else:
                new_node = Node(data)
                new_node.nlink = n.nlink
                new_node.plink = n
                if n.nlink is not None:
                    n.nlink.plink = new_node
                n.nlink = new_node
                
    def add_before(self,data,x):
        if self.head is None:
            print("LL is empty!")
        else:
            n = self.head
            while n is not None:
                if x==n.data:
                    break
                n = n.nlink
            if n is None:
                print("Given Node is not present in DLL")
            else:
                new_node = Node(data)
                new_node.nlink = n
                new_node.plink = n.plink               
                if n.plink is not None:
                    n.plink.nlink = new_node
                else:
                    self.head = new_node
                n.plink = new_node
                
    def delete_first(self):
        if self.head is None:
            print("DLL is empty can't delte !")
            return
        if self.head.nlink is None:
            self.head = None
            print("DLL is empty after deleting the node!")
        else:
            self.head = self.head.nlink
            self.head.plink = None
            
    def delete_last(self):
        if self.head is None:
            print("DLL is empty can't delte !")
            return
        if self.head.nlink is None:
            self.head = None
            print("DLL is empty after deleting the node!")
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            n.plink.nlink = None

    def delete_mid(self,x):
        if self.head is None:
            print("DLL is empty can't delte !")
            return
        if self.head.nlink is None:
            if x==self.head.data:
                self.head = None
            else:
                print("x is not present in DLL")
            return
        if self.head.data == x:
            self.head = self.head.nlink
            self.head.plink = None
            return
        n = self.head
        while n.nlink is not None:
            if x==n.data:
                break
            n = n.nlink
        if n.nlink is not None:
            n.nlink.plink = n.plink
            n.plink.nlink = n.nlink
        else:
            if n.data==x:
                n.plink.nlink = None
            else:
                print("x is not present in dll!")
                
dll=Double_Ll()
dll.add_first(10)
dll.add_last(250)
dll.add_last(20)
dll.add_before(100,20)
dll.add_after(200,10)
dll.delete_first()
dll.delete_last()
dll.delete_mid(100)
dll.Forward_traversal()
dll.backward_traversal()
