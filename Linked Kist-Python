class Node:
    def __init__(self,data):
        self.data=data
        self.link=None
class Single_Ll:
    def __init__(self):
        self.head=None
        
    def traversal(self):
        if self.head==None:
            print("Linked List is Empty")
        else:
            n=self.head
            while n is not None:
                print(n.data,"----->",end=" ")
                n=n.link
                
    def add_first(self,data):
        new_node=Node(data)
        new_node.link=self.head
        self.head=new_node
        
    def add_last(self,data):
        new_node=Node(data)
        if self.head==None:
            self.head=new_node
        else:
            n=self.head
            while n.link is not None:
                n=n.link
            n.link=new_node
        
    def add_after(self,data,x):
        n = self.head
        while n is not None:
            if x==n.data:
                break
            n = n.link
        if n is None:
            print("node is not presesnt in LL")
        else:
            new_node = Node(data)
            new_node.link = n.link
            n.link=new_node
    
    def add_before(self,data,x):
        if self.head is None:
            print("Linked List is empty!")
            return
        if self.head.data==x:
            new_node = Node(data)
            new_node.link = self.head
            self.head = new_node
            return
        n = self.head
        while n.link is not None:
            if n.link.data==x:
                break
            n = n.link        
        if n.link is None:
            print("Node is not found!")
        else:
            new_node = Node(data)
            new_node.link = n.link
            n.link = new_node     
            
            
    def delete_first(self):
        if self.head is None:
            print("Linked List is empty can't delete!")
        else:
            self.head=self.head.link
            
    def delete_last(self):
        if self.head==None:
            print("Linked List is empty")
        n=self.head
        while n.link.link is not None:
            n=n.link
        n.link=None
    
    def delete_mid(self,x):
        if self.head==None:
            print("Linked List is empty")
            return
        if x==self.head.data:
            self.head=self.head.link
            return
        n=self.head
        while n.link is not None:
            if x==n.link.data:
                break
            n=n.link
        if n.link is None:
            print("Node is not Present")
        n.link=n.link.link
        
            
            
L=Single_Ll()
L.add_first(10)
L.add_first(11)
L.add_last(20)
L.add_last(30)
L.add_last(100)
L.add_before(500,100)
L.add_after(1000,20)
L.delete_mid(30)
L.delete_last()
L.delete_first()
L.traversal()
